[alias]
        co = checkout
        br = branch --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(contents:subject) %(color:green)(%(committerdate:relative)) [%(authorname)]' --sort=-committerdate
        s = status --short --branch
        ss = status
        a = add
        u = add -u
        d = diff
        cm = commit --message
        ca = commit --amend --no-edit
        # NOTE commit with footer BREAKING CHANGE correlates with MAJOR in semantic versioning
        # code changes under `src` that either break or not covered by tests
        # correlates with MINOR in semantic versioning
        cmf = "!f(){ git commit -m \"feat: $1\";}; f"
        # code changes under `src` fixing a bug; maybe it makes a failing test pass
        # correlates with PATCH in semantic versioning
        cmb = "!f(){ git commit -m \"fix: $1\";}; f"
        # code changes under `tests`; any of add, remove or modify test files
        cmt = "!f(){ git commit -m \"test: $1\";}; f"
        # code changes under `src` that do not break tests; preserving functionality
        cmr = "!f(){ git commit -m \"refactor: $1\";}; f"
        # code changes under `src` that alter style, likely by formatter or fix lint errors
        cms = "!f(){ git commit -m \"style: $1\";}; f"
        # changes in the documentation, either the docstrings or `docs` dir
        cmd = "!f(){ git commit -m \"docs: $1\";}; f"
        # changes in the build system, maybe under `build`
        cml = "!f(){ git commit -m \"build: $1\";}; f"
        # changes in the continuous integration system, configuration files
        cmk = "!f(){ git commit -m \"ci: $1\";}; f"
        # changes in project not fitting anything else, nor dedicated dirs
        cmj = "!f(){ git commit -m \"chore: $1\";}; f"
        # initializing files into work tree, maybe as copy of another file
        cmi = "!f(){ git commit -m \"init: $1\";}; f"
        p = push
        pr = pull --rebase
        pm = pull
        ll = log --oneline
        last = log -1 HEAD --stat
        lg = log --pretty=pretty-log --abbrev-commit -30
        master = !git checkout $(git remote show origin | sed -nr 's/HEAD branch: (\\w+)/\\1/p')
        sweep = !git master && git fetch --prune && git branch -v --merged | sed -rn 's/^[[:blank:]]*([[:alnum:]\\/-]+)[[:blank:]]+\\w{7}[[:blank:]]+\\[gone\\][[:graph:][:blank:]]*/\\1/p' | xargs git branch -d
        f = !git fetch && git checkout
        gl = config --global --list
        cl = config --get-regexp '^alias.cm\\w\\b'
        r = rev-parse --show-toplevel
        undo = reset --soft HEAD~
        who = !git config --get user.name && git config --get user.email
        # NOTE: user-* is a class of aliases that are environment dependant
        # NOTE: recommend ignore line from tracking with gitattribute filter
        # user-* = !git config user.name && git config user.email
[pretty]
        pretty-log = format:%C(magenta)%h%Creset -%C(red)%d%Creset %s %C(dim green)(%cr) [%an]
[filter "gitignore"]
        clean = "sed '/#[[:blank:]]*gitignore[[:blank:]]*$/d'"
        smudge = cat
[core]
        attributesFile = /home/dimitar/.gitattributes
[pull]
        ff = only
