" ==> disable backup vi compatibility, if not already set
if &compatible
    set nocompatible
endif

" ==> guard load filetype plugin with syntax
if !(exists('g:did_load_filetypes') && exists('g:did_load_ftplugin') && exists('g:did_indent_on'))
    filetype plugin indent on
endif

if has('syntax') && !exists('g:syntax_on')
    syntax enable
endif

" ==> enable colors in terminal
if has('termguicolors')
    set termguicolors
endif

" Allow color schemes to do bright colors without forcing bold.
if &t_Co == 8 && $TERM !~# '^Eterm'
    set t_Co=16
endif

" ==> set leader
" '/' is the default;
" ',' is a common alternative
let mapleader="\<space>"
let maplocalleader="\<space>"

" ==> line numbering
set number
set relativenumber
" set signcolumn=number

" ==> alternate line numbering per mode
" set relativenumber nonumber
" autocmd! InsertEnter * :setlocal norelativenumber number
" autocmd! InsertLeave * :setlocal relativenumber  nonumber

" ==> enable mouse only in normal mode
set mouse-=a
"set ttymouse= " breaks auto resize when terminal size changes

" ==> Don't show the mode, since it's already in the status line
set noshowmode

" ==> access system clipboard
if has("unnamedplus")
    set clipboard=unnamedplus
else
    set clipboard=unnamed
endif

" ==> format options, see :h fo-table
autocmd! FileType,BufWinEnter * setlocal fo-=o fo+=r fo+=b fo+=1 fo+=p
set nowrap
set linebreak
set breakindent

" ==> Save undo history
set undofile

" ==> search config case insensitive UNLESS \C or one or more capital letters
" resource https://vim.fandom.com/wiki/Searching
set hlsearch    " enable search highlighting
set incsearch   " incremental search that shows partial matches
set ignorecase  " ignore case when searching
set smartcase   " automatically switch to case-sensitive when search
set magic       " for regular expressions turn magic on
nnoremap <Esc> :nohlsearch<cr>
" nnoremap <C-l> :nohlsearch<CR>
"nnoremap n n
"nnoremap N N

" Use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-l>', 'n') ==# ''
    nnoremap <C-l> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
endif

" ==> Decrease update time
set updatetime=250

" ==> Decrease mapped sequence wait time
set timeoutlen=300

" ==> Configure how new splits should be opened
set splitright

" ==> visual guides for blank characters
set list
set listchars=tab:❘-,trail:·,extends:»,precedes:«,nbsp:×
" vim.opt.listchars = { tab = '» ', trail = '·', nbsp = '␣' }

" ==> highlight current line number via colorscheme
set cursorline
set cursorlineopt=both

" ==> screen lines
set scrolloff=3
set sidescrolloff=3
set display=lastline

" ==> if performing an operation that would fail due to unsaved changes in the buffer (like `:q`),
" instead raise a dialog asking if you wish to save the current file(s)
" See `:help 'confirm'`
set confirm

" ==> Diagnostic keymaps
nnoremap <leader>q copen
" vim.keymap.set('n', '<leader>q', vim.diagnostic.setloclist, { desc = 'Open diagnostic [Q]uickfix list' })

" ==> terminal
" tnoremap <ESC> <C-\><C-n>
tnoremap <ESC><esc> <C-\><C-n>
"vim.keymap.set('t', '<Esc><Esc>', '<C-\\><C-n>', { desc = 'Exit terminal mode' })

" ==> easy quit/write
" Close the current buffer, quit vim if it's the last buffer
" Pass argument '!" to do so without asking to save
function! CloseBufferOrVim(force='')
    if &buftype == 'help'
        exec ("bdelete" . a:force)
    elseif len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1
        exec ("quit" . a:force)
        quit
    else
        exec ("bdelete" . a:force)
    endif
endfunction

nnoremap <leader>q :call CloseBufferOrVim()<CR>
nnoremap <leader>Q :call CloseBufferOrVim('!')<CR>
nnoremap <leader>w :w<cr>

" ==> netrw shortcut
nnoremap <leader>ev :Ex<cr>

" ==> easy insert/append
function! RepeatChar(char, count)
    return repeat(a:char, a:count)
endfunction
nnoremap s :<C-U>exec "normal i".RepeatChar(nr2char(getchar()), v:count1)<CR>
nnoremap S :<C-U>exec "normal a".RepeatChar(nr2char(getchar()), v:count1)<CR>

" ==> add/remove blank lines around cursor line
nnoremap <leader>j m`o<esc>``
nnoremap <leader>k m`O<esc>``
nnoremap gj m`:+g/\m^\s*$/d<cr>``:noh<cr>
nnoremap gk m`:-g/\m^\s*$/d<cr>``:noh<cr>

" ==> text width
let textThreshold = 80
let &textwidth = textThreshold
let &colorcolumn = textThreshold

" ==> toggle insert mode
nnoremap ++ :set invpaste<cr>

" ==> show (partial) command in in the last line of the screen
set showcmd

" ==> set command-line completion in an enhanced mode
set wildmenu
set wildchar=<C-N>

" ==> disable error bells
set noerrorbells
set novisualbell

" ==> control highlighting matching brackets
set showmatch
" set matchtime=5
" set matchpairs+=<:>

" ==> remap esc key
inoremap kj <esc>l
inoremap jk <esc>l
" inoremap jw <esc>l
" inoremap wj <esc>l
" gV is to prevent automatic reselection
vnoremap <Tab> <Esc>gV
" cancel any operator pending command, e.g. y
onoremap <Tab> <Esc>
" cancel any command that was entered
cnoremap <Tab> <C-C><Esc>

" ==> toggle read only mode
nnoremap -- :set readonly!<cr>

" ==> trim trailing spaces and blank lines at end of the file
function! Preserve(command)
    " Preparation: save last search, and cursor position.
    let _s = @/
    let l  = line(".")
    let c  = col(".")
    " Do the business:
    execute a:command
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

augroup TrimBlanks
    autocmd!
    autocmd BufWritePre * call Preserve("%s/\\S\\zs\ \\+$//e")
    autocmd BufWritePre * call Preserve("%s/\\S\\zs\t\\+$//e")
    autocmd BufWritePre * call Preserve("%s#\\($\\n\\s\*\\)\\+\\%$##e")
    autocmd BufWritePre * call Preserve("%s/\\s\\+$//e")
    " autocmd BufWritePre * call Preserve("normal gg=G")
augroup END

" ==> conceal level contrl
set conceallevel=2
set concealcursor="inc"
" autocmd! BufEnter * setlocal conceallevel=1
" autocmd! BufEnter * setlocal concealcursor=n

" ==> force disable ctrl + space
inoremap <c-@> <nop>
inoremap <c-space> <nop>
nnoremap <c-space> <nop>

" ==> better indent visual selection
vnoremap < <gv
vnoremap > >gv

" ==> move selected line/block in visual mode
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" ==> pane resizing control
"nnoremap <Left> :vertical resize +1<CR>
"nnoremap <Right> :vertical resize -1<CR>
"nnoremap <Up> :resize -1<CR>
"nnoremap <Down> :resize +1<CR>

" ==> search and replace word under curssor
nnoremap g/ :%s/<C-r><C-W>//c<left><left>
"nnoremap G/ :%s/<C-r><C-W>//g<left><left>
vnoremap g/ y:%s/<C-r>0//c<left><left>
"vnoremap G/ y:%s/<C-r>0//g<left><left>

" ==> completation
set complete+=kspell
set completeopt=longest,menuone
set omnifunc=syntaxcomplete#Complete

" ==> spelling
let g:spellfile_URL = 'http://ftp.vim.org/vim/runtime/spell'
set spell
set spelllang=en
" set spelllang+=bg  " spellcheck language

" ==> indentation without hard tabs
" resource https://vim.fandom.com/wiki/Indenting_source_code
let b:indent=4
set expandtab             " convert tabs to 'softtabstop' amount of spaces
let &shiftwidth=b:indent  " affects when pressing >>, << or == and auto indentation
let &softtabstop=b:indent " affects <TAB> or <BS>;
" let &tabstop=b:indent   " not recommended as may alter view of other editors
set smartindent

" ==> buffers
set hidden
nnoremap gbd :bprevious<CR> :bdelete #<CR>
nnoremap gbl :ls<CR>
nnoremap gbb :ls<CR>:b
nnoremap gbf :tab sball<cr>
nnoremap gbn :vnew<CR>

nnoremap H :bprevious<cr>
nnoremap L :bnext<cr>

" ==> diff mode goodies
if &diff
    " diff mode ignore white spaces
    set diffopt+=iwhiteall

    " put/obtain line cursor is on
    nnoremap gdp V:diffput<cr>
    nnoremap gdo V:diffget<cr>
    vnoremap gdp <esc>gv:diffput<cr>
    vnoremap gdo <esc>gv:diffget<cr>

    " undo the other, inactive window
    nnoremap gdu :wincmd w<cr>:normal u<cr>:wincmd w<cr>

    " recalculate differences
    nnoremap gdr :diffupdate<cr>
endif

" ==> paste over visual selection without yanking it back
vnoremap p "_dP

" ==> open help files in vertical split
autocmd! FileType help wincmd L

" ==> align vim command line with terminal maps
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
" cnoremap <C-p> <Up>
" cnoremap <C-n> <Down>
cnoremap <C-b> <Left>
cnoremap <C-f> <Right>
cnoremap <M-b> <S-Left>
cnoremap <M-f> <S-Right>

"Preview substitutions live, as you type!
set inccommand=split
