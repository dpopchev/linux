" ==> disable backup vi compatibility, if not already set
if &compatible
    set nocompatible
endif

" ==> guard load filetype plugin with syntax
if !(exists('g:did_load_filetypes') && exists('g:did_load_ftplugin') && exists('g:did_indent_on'))
    filetype plugin indent on
endif
if has('syntax') && !exists('g:syntax_on')
    syntax enable
endif

" ==> enable colors in terminal
if has('termguicolors')
    set termguicolors
endif
set background=dark

" Allow color schemes to do bright colors without forcing bold.
if &t_Co == 8 && $TERM !~# '^Eterm'
    set t_Co=16
endif

" ==> set leader
" '/' is the default;
" ',' is a common alternative
let mapleader="\<space>"

" ==> netrw shortcut
nnoremap <leader>ev :Ex<cr>

" ==> easy quit/write
nnoremap <leader>q :q<cr>
nnoremap <leader>Q :q!<cr>
nnoremap <leader>w :w<cr>

" ==> easy insert/append
function! RepeatChar(char, count)
    return repeat(a:char, a:count)
endfunction
nnoremap s :<C-U>exec "normal i".RepeatChar(nr2char(getchar()), v:count1)<CR>
nnoremap S :<C-U>exec "normal a".RepeatChar(nr2char(getchar()), v:count1)<CR>

" ==> add/remove blank lines around cursor line
nnoremap <leader>j m`o<esc>``
nnoremap <leader>k m`O<esc>``
nnoremap gj m`:+g/\m^\s*$/d<cr>``:noh<cr>
nnoremap gk m`:-g/\m^\s*$/d<cr>``:noh<cr>

" ==> line numbering
set number
set relativenumber
" set signcolumn=number

" ==> alternate line numbering per mode
" set relativenumber nonumber
" autocmd! InsertEnter * :setlocal norelativenumber number
" autocmd! InsertLeave * :setlocal relativenumber  nonumber

" ==> screen lines
set scrolloff=3
set sidescrolloff=3
set display=lastline

" ==> text width
let textThreshold = 80
let &textwidth = textThreshold
let &colorcolumn = textThreshold

" ==> access system clipboard
set clipboard=unnamedplus

" ==> format options, see :h fo-table
autocmd! FileType,BufWinEnter * setlocal fo-=o fo+=r fo+=b fo+=1 fo+=p
set nowrap
set linebreak
set breakindent

" ==> highlight current line number via colorscheme
set cursorline
set cursorlineopt=number

" ==> toggle insert mode
nnoremap ++ :set invpaste<cr>

" ==> visual guides for blank characters
set list listchars=tab:❘-,trail:·,extends:»,precedes:«,nbsp:×

" ==> show (partial) command in in the last line of the screen
set showcmd

" ==> set command-line completion in an enhanced mode
set wildmenu
set wildchar=<C-N>

" ==> disable error bells
set noerrorbells
set novisualbell

" ==> control highlighting matching brackets
set showmatch
" set matchtime=5
" set matchpairs+=<:>

" ==> enable mouse only in normal mode
set mouse=

" ==> remap esc key
inoremap kj <esc>l
inoremap jk <esc>l
" inoremap jw <esc>l
" inoremap wj <esc>l
" gV is to prevent automatic reselection
vnoremap <Tab> <Esc>gV
" cancel any operator pending command, e.g. y
onoremap <Tab> <Esc>
" cancel any command that was entered
cnoremap <Tab> <C-C><Esc>

" ==> toggle read only mode
nnoremap -- :set readonly!<cr>

" ==> trim trailing spaces and blank lines at end of the file
function! Preserve(command)
    " Preparation: save last search, and cursor position.
    let _s = @/
    let l  = line(".")
    let c  = col(".")
    " Do the business:
    execute a:command
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

augroup TrimBlanks
    autocmd!
    autocmd BufWritePre * call Preserve("%s/\\S\\zs\ \\+$//e")
    autocmd BufWritePre * call Preserve("%s/\\S\\zs\t\\+$//e")
    autocmd BufWritePre * call Preserve("%s#\\($\\n\\s\*\\)\\+\\%$##e")
    autocmd BufWritePre * call Preserve("%s/\\s\\+$//e")
    " autocmd BufWritePre * call Preserve("normal gg=G")
augroup END

" ==> conceal level contrl
set conceallevel=2
set concealcursor="inc"
" autocmd! BufEnter * setlocal conceallevel=1
" autocmd! BufEnter * setlocal concealcursor=n

" ==> force disable ctrl + space
inoremap <c-@> <nop>
inoremap <c-space> <nop>
nnoremap <c-space> <nop>

" ==> better indent visual selection
vnoremap < <gv
vnoremap > >gv

" ==> move selected line/block in visual mode
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" ==> pane resizing control
nnoremap <Left> :vertical resize +1<CR>
nnoremap <Right> :vertical resize -1<CR>
nnoremap <Up> :resize -1<CR>
nnoremap <Down> :resize +1<CR>

" ==> search config
" resource https://vim.fandom.com/wiki/Searching
set hlsearch    " enable search highlighting
set incsearch   " incremental search that shows partial matches
set ignorecase  " ignore case when searching
set smartcase   " automatically switch to case-sensitive when search
set magic       " for regular expressions turn magic on
nnoremap <C-l> :nohlsearch<CR><esc>
nnoremap n nzz
nnoremap N Nzz

" Use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-L>', 'n') ==# ''
    nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
endif

" ==> encoding
if &encoding ==# 'latin1' && has('gui_running')
    set encoding=utf-8
endif

" ==> search and replace word under curssor
nnoremap gs/ :s/<C-r><C-W>/
nnoremap gss :&&<cr>
nnoremap gsS :%s/<C-r><C-W>/

" ==> completation
set complete+=kspell
set completeopt=longest,menuone
set omnifunc=syntaxcomplete#Complete

" ==> spelling
let g:spellfile_URL = 'http://ftp.vim.org/vim/runtime/spell'
set spell
set spelllang=en
" set spelllang+=bg  " spellcheck language

" ==> indentation without hard tabs
" resource https://vim.fandom.com/wiki/Indenting_source_code
let b:indent=4
set expandtab             " convert tabs to 'softtabstop' amount of spaces
let &shiftwidth=b:indent  " affects when pressing >>, << or == and auto indentation
let &softtabstop=b:indent " affects <TAB> or <BS>;
" let &tabstop=b:indent   " not recommended as may alter view of other editors

function! InsertHalfShiftwidth()
    return repeat(' ', &shiftwidth/2)
endfunction
inoremap <S-tab> <C-R>=InsertHalfShiftwidth()<cr>

" ==> buffers
set splitright
set hidden
nnoremap gbd :bprevious<CR> :bdelete #<CR>
nnoremap gbl :ls<CR>
nnoremap gbb :ls<CR>:b
nnoremap gbf :tab sball<cr>
nnoremap gbn :vnew<CR>

nnoremap H :bprevious<cr>
nnoremap L :bnext<cr>

" ==> makefile
nnoremap gmm :make! run FILE=%<bar>redraw!<bar>copen<cr>
nnoremap gmM :terminal make run FILE=%<cr>
nnoremap gmd :make! doctest FILE=%<bar>redraw!<bar>copen<cr>
nnoremap gmt :make! unittest FILE=%<bar>redraw!<bar>copen<cr>
nnoremap gml :make! lint FILE=%<bar>redraw!<bar>copen<cr>
nnoremap gmf :make! format FILE=%<bar>redraw!<bar>copen<cr>
nnoremap gmo :cclose<cr>
nnoremap gmO :copen<cr>
autocmd! FileType qf wincmd L

" ==> terminal
if has('nvim')
    nnoremap <leader><cr> :vsplit <bar> :term<cr>
else
    set termwinkey=<C-X>
    nnoremap <leader><cr> :vert terminal<CR>
endif
tnoremap <C-X>n <C-X>N
tnoremap <C-X><C-N> <C-X>N

if has('nvim')
    augroup neovim_terminal
        autocmd!
        " Enter Terminal-mode (insert) automatically
        " autocmd TermOpen * startinsert " will fail neotest run
        autocmd TermOpen * if nvim_buf_get_name(0) =~# '^term://.*' | startinsert | endif
        " Disables number lines on terminal buffers
        autocmd TermOpen * :set nonumber norelativenumber
        " allows you to use Ctrl-c on terminal window
        autocmd TermOpen * nnoremap <buffer> <C-c> i<C-c>
        " disable spelling
        autocmd TermOpen * :set nospell
    augroup END
endif

autocmd! FileType i3config :set nospell

" ==> auxiliary files
let auxDump=[ $HOME."/.vim/tmp/", $HOME."/.tmp/", $HOME."/tmp/", "/tmp/" ]
let &backupdir=join(auxDump, ",")  " store backup files
let &dir=join(auxDump, ",")        " store swap files
let &undodir=join(auxDump, ",")    " store undo files

" ==> diff mode goodies
if &diff
    " diff mode ignore white spaces
    set diffopt+=iwhiteall

    " put/obtain line cursor is on
    nnoremap gdp V:diffput<cr>
    nnoremap gdo V:diffget<cr>
    vnoremap gdp <esc>gv:diffput<cr>
    vnoremap gdo <esc>gv:diffget<cr>

    " undo the other, inactive window
    nnoremap gdu :wincmd w<cr>:normal u<cr>:wincmd w<cr>

    " recalculate differences
    nnoremap gdr :diffupdate<cr>
endif

" ==> paste over visual selection without yanking it back
vnoremap p "_dP

" ==> open help files in vertical split
autocmd! FileType help wincmd L

" ==> align vim command line with terminal maps
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
" cnoremap <C-p> <Up>
" cnoremap <C-n> <Down>
cnoremap <C-b> <Left>
cnoremap <C-f> <Right>
cnoremap <M-b> <S-Left>
cnoremap <M-f> <S-Right>

" https://github.com/neovim/neovim/issues/21856
if 0 && has_key(environ(), 'TMUX')
    augroup tmux_status_toggle
        autocmd!
        autocmd! VimEnter,VimResume * silent !tmux set status off
        autocmd! VimLeave,VimSuspend * call jobstart('tmux set status on', {'detach': 1})
    augroup END
endif
