local lsp = require('lsp-zero')
lsp.setup()

vim.diagnostic.config({virtual_text=true, signs=false})

-- local whichkey = require "which-key"
--
-- local function on_attach(client, bufnr)
--     -- Enable completion triggered by <C-X><C-O>
--     -- See `:help omnifunc` and `:help ins-completion` for more information.
--     vim.api.nvim_buf_set_option(bufnr, "omnifunc", "v:lua.vim.lsp.omnifunc")
--
--     -- Use LSP as the handler for formatexpr.
--     -- See `:help formatexpr` for more information.
--     vim.api.nvim_buf_set_option(0, "formatexpr", "v:lua.vim.lsp.formatexpr()")
--
--     local opts = { noremap = true, silent = false, buffer = bufnr }
--     local keymap = vim.keymap.set
--
--     vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')
--
--     keymap("n", "K", vim.lsp.buf.hover, opts)
--     keymap("n", "[d", vim.diagnostic.goto_prev, opts)
--     keymap("n", "]d", vim.diagnostic.goto_next, opts)
--     keymap("n", "[e", function() vim.diagnostic.goto_prev({severity = vim.diagnostic.severity.ERROR}) end, opts)
--     keymap("n", "]e", function() vim.diagnostic.goto_next({severity = vim.diagnostic.severity.ERROR}) end, opts)
--
--     local keymap_l = {
--         l = {
--             name = "Code",
--             r = { vim.lsp.buf.rename, "Rename" },
--             a = { vim.lsp.buf.code_action, "Code Action" },
--             d = { vim.diagnostic.open_float, "Line Diagnostics" },
--             i = { '<cmd>LspInfo<cr>', "Lsp Info" },
--             q = { vim.diagnostic.setloclist, "Diagnostics Local list" },
--             u = { vim.lsp.buf.references, "List symbol usage/references"},
--         },
--     }
--
--     if client.server_capabilities.documentFormattingProvider then
--         keymap_l.l.f = { vim.lsp.buf.formatting, "Format Document" }
--     end
--
--     local keymap_g = {
--         name = "Goto",
--         d = { vim.lsp.buf.definition, "Definition" },
--         D = { vim.lsp.buf.declaration, "Declaration" },
--         s = { vim.lsp.buf.signature_help, "Signature Help" },
--         I = { vim.lsp.buf.implementation, "Goto Implementation" },
--         t = { vim.lsp.buf.type_definition, "Goto Type Definition" },
--     }
--     whichkey.register(keymap_l, { buffer = bufnr, prefix = "<leader>" })
--     whichkey.register(keymap_g, { buffer = bufnr, prefix = "g" })
-- end
--
-- vim.opt.signcolumn = 'yes' -- Reserve space for diagnostic icons
--
-- local cmp = require('cmp')
-- local cmp_select = {behavior = cmp.SelectBehavior.Select}
--
-- local lsp = require('lsp-zero')
--
-- lsp.preset('recommended')
--
-- lsp.ensure_installed({
--   'sumneko_lua',
--   'jedi_language_server'
-- })
--
-- local cmp_mappings = lsp.defaults.cmp_mappings({
--     ['<C-p>'] = cmp.mapping.select_prev_item(cmp_select),
--     ['<C-n>'] = cmp.mapping.select_next_item(cmp_select),
-- })
-- lsp.set_preferences( {
--     sign_icons = {
--         error = 'X',
--         warn = 'W',
--         hint = 'H',
--         info = 'I'
--     }
-- })
--
--
-- lsp.setup_nvim_cmp({mapping = cmp_mappings})
--
-- lsp.configure('sumneko_lua', {settings = { Lua = { diagnostics = { globals = { 'vim' } } } }})
--
-- lsp.setup()
